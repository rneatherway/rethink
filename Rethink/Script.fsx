// Learn more about F# at http://fsharp.net. See the 'F# Tutorial' project
// for more guidance on F# programming.

// Automatically generated by F# powertools.
#load "Scripts/load-references-debug.fsx"
#r "obj/Debug/Rethink.exe"

open System.IO
open Microsoft.FSharp.Compiler.SourceCodeServices
open Microsoft.FSharp.Compiler.Ast

fsi.AddPrinter Rethink.Sort.sprint
fsi.AddPrinter Rethink.FunDefn.sprint
fsi.AddPrinter Rethink.SortDefn.sprint

// Create an interactive checker instance 
let checker = FSharpChecker.Create(keepAssemblyContents=true)

let parseAndCheckSingleFile (input) = 
    let file = Path.ChangeExtension(System.IO.Path.GetTempFileName(),"fsx")  
    File.WriteAllText(file, input)
    // Get context representing a stand-alone (script) file
    let projOptions = 
        checker.GetProjectOptionsFromScript(file, input)
        |> Async.RunSynchronously

    checker.ParseAndCheckProject(projOptions) 
    |> Async.RunSynchronously

let input2 = 
      """
module MyLibrary 

type MyStuff<'a> =
  | A of int
  | B of MyStuff<'a> * 'a

let smth ms =
  match ms with
  | B (ns, 6) -> 
      match ns with
      | A i -> A i
      | B (zs,k) -> match zs with | A j -> A j

let rec f x = g (x+1)
and g x = if x < 0 then 0 else f (x-2)

let mything =
  let z = fun a -> a
  let rec hoi x =
    if x = 0 then x else (x-1)
  z

let app f x = f x

let succ n = if n > 0 then n + 1 else 3

let z = app succ 2

      """

let mything =
  let z = fun a -> a
  let rec hoi x =
    if x = 0 then x else (x-1)
  z

let checkProjectResults = 
    parseAndCheckSingleFile(input2)

let checkedFile = checkProjectResults.AssemblyContents.ImplementationFiles.[0]

let myLibraryEntity, myLibraryDecls =    
   match checkedFile.Declarations.[0] with 
   | FSharpImplementationFileDeclaration.Entity (e,subDecls) -> (e,subDecls)
   | _ -> failwith "unexpected"

let sortDefs, funDefs = 
  List.fold Rethink.FSharp.implementationFileDeclarationToDefns (Map.empty,[]) myLibraryDecls

 
